// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/hashicorp/consul-api-gateway/internal/core"
	store "github.com/hashicorp/consul-api-gateway/internal/store"
)

// MockStatusTrackingGateway is a mock of StatusTrackingGateway interface.
type MockStatusTrackingGateway struct {
	ctrl     *gomock.Controller
	recorder *MockStatusTrackingGatewayMockRecorder
}

// MockStatusTrackingGatewayMockRecorder is the mock recorder for MockStatusTrackingGateway.
type MockStatusTrackingGatewayMockRecorder struct {
	mock *MockStatusTrackingGateway
}

// NewMockStatusTrackingGateway creates a new mock instance.
func NewMockStatusTrackingGateway(ctrl *gomock.Controller) *MockStatusTrackingGateway {
	mock := &MockStatusTrackingGateway{ctrl: ctrl}
	mock.recorder = &MockStatusTrackingGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusTrackingGateway) EXPECT() *MockStatusTrackingGatewayMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockStatusTrackingGateway) Bind(ctx context.Context, route store.Route) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, route)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockStatusTrackingGatewayMockRecorder) Bind(ctx, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockStatusTrackingGateway)(nil).Bind), ctx, route)
}

// CanFetchSecrets mocks base method.
func (m *MockStatusTrackingGateway) CanFetchSecrets(ctx context.Context, secrets []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanFetchSecrets", ctx, secrets)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanFetchSecrets indicates an expected call of CanFetchSecrets.
func (mr *MockStatusTrackingGatewayMockRecorder) CanFetchSecrets(ctx, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanFetchSecrets", reflect.TypeOf((*MockStatusTrackingGateway)(nil).CanFetchSecrets), ctx, secrets)
}

// ID mocks base method.
func (m *MockStatusTrackingGateway) ID() core.GatewayID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(core.GatewayID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockStatusTrackingGatewayMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStatusTrackingGateway)(nil).ID))
}

// Remove mocks base method.
func (m *MockStatusTrackingGateway) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockStatusTrackingGatewayMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStatusTrackingGateway)(nil).Remove), ctx, id)
}

// Resolve mocks base method.
func (m *MockStatusTrackingGateway) Resolve() core.ResolvedGateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve")
	ret0, _ := ret[0].(core.ResolvedGateway)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockStatusTrackingGatewayMockRecorder) Resolve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockStatusTrackingGateway)(nil).Resolve))
}

// TrackSync mocks base method.
func (m *MockStatusTrackingGateway) TrackSync(ctx context.Context, sync func() (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackSync", ctx, sync)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackSync indicates an expected call of TrackSync.
func (mr *MockStatusTrackingGatewayMockRecorder) TrackSync(ctx, sync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackSync", reflect.TypeOf((*MockStatusTrackingGateway)(nil).TrackSync), ctx, sync)
}

// MockGateway is a mock of Gateway interface.
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway.
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance.
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockGateway) Bind(ctx context.Context, route store.Route) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, route)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockGatewayMockRecorder) Bind(ctx, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockGateway)(nil).Bind), ctx, route)
}

// CanFetchSecrets mocks base method.
func (m *MockGateway) CanFetchSecrets(ctx context.Context, secrets []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanFetchSecrets", ctx, secrets)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanFetchSecrets indicates an expected call of CanFetchSecrets.
func (mr *MockGatewayMockRecorder) CanFetchSecrets(ctx, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanFetchSecrets", reflect.TypeOf((*MockGateway)(nil).CanFetchSecrets), ctx, secrets)
}

// ID mocks base method.
func (m *MockGateway) ID() core.GatewayID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(core.GatewayID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockGatewayMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockGateway)(nil).ID))
}

// Remove mocks base method.
func (m *MockGateway) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockGatewayMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockGateway)(nil).Remove), ctx, id)
}

// Resolve mocks base method.
func (m *MockGateway) Resolve() core.ResolvedGateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve")
	ret0, _ := ret[0].(core.ResolvedGateway)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockGatewayMockRecorder) Resolve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockGateway)(nil).Resolve))
}

// MockStatusTrackingRoute is a mock of StatusTrackingRoute interface.
type MockStatusTrackingRoute struct {
	ctrl     *gomock.Controller
	recorder *MockStatusTrackingRouteMockRecorder
}

// MockStatusTrackingRouteMockRecorder is the mock recorder for MockStatusTrackingRoute.
type MockStatusTrackingRouteMockRecorder struct {
	mock *MockStatusTrackingRoute
}

// NewMockStatusTrackingRoute creates a new mock instance.
func NewMockStatusTrackingRoute(ctrl *gomock.Controller) *MockStatusTrackingRoute {
	mock := &MockStatusTrackingRoute{ctrl: ctrl}
	mock.recorder = &MockStatusTrackingRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusTrackingRoute) EXPECT() *MockStatusTrackingRouteMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockStatusTrackingRoute) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockStatusTrackingRouteMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStatusTrackingRoute)(nil).ID))
}

// OnGatewayRemoved mocks base method.
func (m *MockStatusTrackingRoute) OnGatewayRemoved(gateway store.Gateway) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnGatewayRemoved", gateway)
}

// OnGatewayRemoved indicates an expected call of OnGatewayRemoved.
func (mr *MockStatusTrackingRouteMockRecorder) OnGatewayRemoved(gateway interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnGatewayRemoved", reflect.TypeOf((*MockStatusTrackingRoute)(nil).OnGatewayRemoved), gateway)
}

// SyncStatus mocks base method.
func (m *MockStatusTrackingRoute) SyncStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockStatusTrackingRouteMockRecorder) SyncStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockStatusTrackingRoute)(nil).SyncStatus), ctx)
}

// MockRoute is a mock of Route interface.
type MockRoute struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMockRecorder
}

// MockRouteMockRecorder is the mock recorder for MockRoute.
type MockRouteMockRecorder struct {
	mock *MockRoute
}

// NewMockRoute creates a new mock instance.
func NewMockRoute(ctrl *gomock.Controller) *MockRoute {
	mock := &MockRoute{ctrl: ctrl}
	mock.recorder = &MockRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute) EXPECT() *MockRouteMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockRoute) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRouteMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRoute)(nil).ID))
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteGateway mocks base method.
func (m *MockStore) DeleteGateway(ctx context.Context, id core.GatewayID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockStoreMockRecorder) DeleteGateway(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockStore)(nil).DeleteGateway), ctx, id)
}

// DeleteRoute mocks base method.
func (m *MockStore) DeleteRoute(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockStoreMockRecorder) DeleteRoute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockStore)(nil).DeleteRoute), ctx, id)
}

// GetGateway mocks base method.
func (m *MockStore) GetGateway(ctx context.Context, id core.GatewayID) (store.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway", ctx, id)
	ret0, _ := ret[0].(store.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGateway indicates an expected call of GetGateway.
func (mr *MockStoreMockRecorder) GetGateway(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockStore)(nil).GetGateway), ctx, id)
}

// Sync mocks base method.
func (m *MockStore) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockStoreMockRecorder) Sync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockStore)(nil).Sync), ctx)
}

// UpsertGateway mocks base method.
func (m *MockStore) UpsertGateway(ctx context.Context, gateway store.Gateway, updateConditionFn func(store.Gateway) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertGateway", ctx, gateway, updateConditionFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGateway indicates an expected call of UpsertGateway.
func (mr *MockStoreMockRecorder) UpsertGateway(ctx, gateway, updateConditionFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGateway", reflect.TypeOf((*MockStore)(nil).UpsertGateway), ctx, gateway, updateConditionFn)
}

// UpsertRoute mocks base method.
func (m *MockStore) UpsertRoute(ctx context.Context, route store.Route, updateConditionFn func(store.Route) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRoute", ctx, route, updateConditionFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoute indicates an expected call of UpsertRoute.
func (mr *MockStoreMockRecorder) UpsertRoute(ctx, route, updateConditionFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoute", reflect.TypeOf((*MockStore)(nil).UpsertRoute), ctx, route, updateConditionFn)
}
