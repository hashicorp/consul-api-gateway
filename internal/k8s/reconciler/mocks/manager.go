// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockReconcileManager is a mock of ReconcileManager interface.
type MockReconcileManager struct {
	ctrl     *gomock.Controller
	recorder *MockReconcileManagerMockRecorder
}

// MockReconcileManagerMockRecorder is the mock recorder for MockReconcileManager.
type MockReconcileManagerMockRecorder struct {
	mock *MockReconcileManager
}

// NewMockReconcileManager creates a new mock instance.
func NewMockReconcileManager(ctrl *gomock.Controller) *MockReconcileManager {
	mock := &MockReconcileManager{ctrl: ctrl}
	mock.recorder = &MockReconcileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconcileManager) EXPECT() *MockReconcileManagerMockRecorder {
	return m.recorder
}

// DeleteGateway mocks base method.
func (m *MockReconcileManager) DeleteGateway(name types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteGateway", name)
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockReconcileManagerMockRecorder) DeleteGateway(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockReconcileManager)(nil).DeleteGateway), name)
}

// DeleteGatewayClass mocks base method.
func (m *MockReconcileManager) DeleteGatewayClass(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteGatewayClass", name)
}

// DeleteGatewayClass indicates an expected call of DeleteGatewayClass.
func (mr *MockReconcileManagerMockRecorder) DeleteGatewayClass(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayClass", reflect.TypeOf((*MockReconcileManager)(nil).DeleteGatewayClass), name)
}

// DeleteRoute mocks base method.
func (m *MockReconcileManager) DeleteRoute(name types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRoute", name)
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockReconcileManagerMockRecorder) DeleteRoute(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockReconcileManager)(nil).DeleteRoute), name)
}

// UpsertGateway mocks base method.
func (m *MockReconcileManager) UpsertGateway(g *v1alpha2.Gateway) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertGateway", g)
}

// UpsertGateway indicates an expected call of UpsertGateway.
func (mr *MockReconcileManagerMockRecorder) UpsertGateway(g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGateway", reflect.TypeOf((*MockReconcileManager)(nil).UpsertGateway), g)
}

// UpsertGatewayClass mocks base method.
func (m *MockReconcileManager) UpsertGatewayClass(gc *v1alpha2.GatewayClass, validParameters bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertGatewayClass", gc, validParameters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGatewayClass indicates an expected call of UpsertGatewayClass.
func (mr *MockReconcileManagerMockRecorder) UpsertGatewayClass(gc, validParameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGatewayClass", reflect.TypeOf((*MockReconcileManager)(nil).UpsertGatewayClass), gc, validParameters)
}

// UpsertHTTPRoute mocks base method.
func (m *MockReconcileManager) UpsertHTTPRoute(r *v1alpha2.HTTPRoute) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertHTTPRoute", r)
}

// UpsertHTTPRoute indicates an expected call of UpsertHTTPRoute.
func (mr *MockReconcileManagerMockRecorder) UpsertHTTPRoute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertHTTPRoute", reflect.TypeOf((*MockReconcileManager)(nil).UpsertHTTPRoute), r)
}
