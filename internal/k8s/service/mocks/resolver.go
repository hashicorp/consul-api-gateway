// Code generated by MockGen. DO NOT EDIT.
// Source: ./resolver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/hashicorp/consul-api-gateway/internal/k8s/service"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockBackendResolver is a mock of BackendResolver interface.
type MockBackendResolver struct {
	ctrl     *gomock.Controller
	recorder *MockBackendResolverMockRecorder
}

// MockBackendResolverMockRecorder is the mock recorder for MockBackendResolver.
type MockBackendResolverMockRecorder struct {
	mock *MockBackendResolver
}

// NewMockBackendResolver creates a new mock instance.
func NewMockBackendResolver(ctrl *gomock.Controller) *MockBackendResolver {
	mock := &MockBackendResolver{ctrl: ctrl}
	mock.recorder = &MockBackendResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendResolver) EXPECT() *MockBackendResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockBackendResolver) Resolve(ctx context.Context, ref v1alpha2.BackendObjectReference) (*service.ResolvedReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, ref)
	ret0, _ := ret[0].(*service.ResolvedReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockBackendResolverMockRecorder) Resolve(ctx, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockBackendResolver)(nil).Resolve), ctx, ref)
}
