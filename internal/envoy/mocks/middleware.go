// Code generated by MockGen. DO NOT EDIT.
// Source: ./middleware.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGatewayRegistry is a mock of GatewayRegistry interface.
type MockGatewayRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRegistryMockRecorder
}

// MockGatewayRegistryMockRecorder is the mock recorder for MockGatewayRegistry.
type MockGatewayRegistryMockRecorder struct {
	mock *MockGatewayRegistry
}

// NewMockGatewayRegistry creates a new mock instance.
func NewMockGatewayRegistry(ctrl *gomock.Controller) *MockGatewayRegistry {
	mock := &MockGatewayRegistry{ctrl: ctrl}
	mock.recorder = &MockGatewayRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayRegistry) EXPECT() *MockGatewayRegistryMockRecorder {
	return m.recorder
}

// GatewayExists mocks base method.
func (m *MockGatewayRegistry) GatewayExists(namespace, datacenter, service string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayExists", namespace, datacenter, service)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GatewayExists indicates an expected call of GatewayExists.
func (mr *MockGatewayRegistryMockRecorder) GatewayExists(namespace, datacenter, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayExists", reflect.TypeOf((*MockGatewayRegistry)(nil).GatewayExists), namespace, datacenter, service)
}
