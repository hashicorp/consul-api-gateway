// Code generated by MockGen. DO NOT EDIT.
// Source: ./sds.go

// Package mocks is a generated GoMock package.
package mocks

import (
	tls "crypto/tls"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateFetcher is a mock of CertificateFetcher interface.
type MockCertificateFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateFetcherMockRecorder
}

// MockCertificateFetcherMockRecorder is the mock recorder for MockCertificateFetcher.
type MockCertificateFetcherMockRecorder struct {
	mock *MockCertificateFetcher
}

// NewMockCertificateFetcher creates a new mock instance.
func NewMockCertificateFetcher(ctrl *gomock.Controller) *MockCertificateFetcher {
	mock := &MockCertificateFetcher{ctrl: ctrl}
	mock.recorder = &MockCertificateFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateFetcher) EXPECT() *MockCertificateFetcherMockRecorder {
	return m.recorder
}

// RootCA mocks base method.
func (m *MockCertificateFetcher) RootCA() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootCA")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RootCA indicates an expected call of RootCA.
func (mr *MockCertificateFetcherMockRecorder) RootCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootCA", reflect.TypeOf((*MockCertificateFetcher)(nil).RootCA))
}

// TLSCertificate mocks base method.
func (m *MockCertificateFetcher) TLSCertificate() *tls.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSCertificate")
	ret0, _ := ret[0].(*tls.Certificate)
	return ret0
}

// TLSCertificate indicates an expected call of TLSCertificate.
func (mr *MockCertificateFetcherMockRecorder) TLSCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSCertificate", reflect.TypeOf((*MockCertificateFetcher)(nil).TLSCertificate))
}
