// Code generated by MockGen. DO NOT EDIT.
// Source: ./sds.go

// Package mocks is a generated GoMock package.
package mocks

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateFetcher is a mock of CertificateFetcher interface.
type MockCertificateFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateFetcherMockRecorder
}

// MockCertificateFetcherMockRecorder is the mock recorder for MockCertificateFetcher.
type MockCertificateFetcherMockRecorder struct {
	mock *MockCertificateFetcher
}

// NewMockCertificateFetcher creates a new mock instance.
func NewMockCertificateFetcher(ctrl *gomock.Controller) *MockCertificateFetcher {
	mock := &MockCertificateFetcher{ctrl: ctrl}
	mock.recorder = &MockCertificateFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateFetcher) EXPECT() *MockCertificateFetcherMockRecorder {
	return m.recorder
}

// RootPool mocks base method.
func (m *MockCertificateFetcher) RootPool() *x509.CertPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootPool")
	ret0, _ := ret[0].(*x509.CertPool)
	return ret0
}

// RootPool indicates an expected call of RootPool.
func (mr *MockCertificateFetcherMockRecorder) RootPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootPool", reflect.TypeOf((*MockCertificateFetcher)(nil).RootPool))
}

// SPIFFE mocks base method.
func (m *MockCertificateFetcher) SPIFFE() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPIFFE")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// SPIFFE indicates an expected call of SPIFFE.
func (mr *MockCertificateFetcherMockRecorder) SPIFFE() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPIFFE", reflect.TypeOf((*MockCertificateFetcher)(nil).SPIFFE))
}

// TLSCertificate mocks base method.
func (m *MockCertificateFetcher) TLSCertificate() *tls.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSCertificate")
	ret0, _ := ret[0].(*tls.Certificate)
	return ret0
}

// TLSCertificate indicates an expected call of TLSCertificate.
func (mr *MockCertificateFetcherMockRecorder) TLSCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSCertificate", reflect.TypeOf((*MockCertificateFetcher)(nil).TLSCertificate))
}
