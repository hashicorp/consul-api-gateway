// Code generated by MockGen. DO NOT EDIT.
// Source: ./sds.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateFetcher is a mock of CertificateFetcher interface.
type MockCertificateFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateFetcherMockRecorder
}

// MockCertificateFetcherMockRecorder is the mock recorder for MockCertificateFetcher.
type MockCertificateFetcherMockRecorder struct {
	mock *MockCertificateFetcher
}

// NewMockCertificateFetcher creates a new mock instance.
func NewMockCertificateFetcher(ctrl *gomock.Controller) *MockCertificateFetcher {
	mock := &MockCertificateFetcher{ctrl: ctrl}
	mock.recorder = &MockCertificateFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateFetcher) EXPECT() *MockCertificateFetcherMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockCertificateFetcher) Certificate() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certificate")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Certificate indicates an expected call of Certificate.
func (mr *MockCertificateFetcherMockRecorder) Certificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockCertificateFetcher)(nil).Certificate))
}

// PrivateKey mocks base method.
func (m *MockCertificateFetcher) PrivateKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateKey indicates an expected call of PrivateKey.
func (mr *MockCertificateFetcherMockRecorder) PrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKey", reflect.TypeOf((*MockCertificateFetcher)(nil).PrivateKey))
}

// RootCA mocks base method.
func (m *MockCertificateFetcher) RootCA() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootCA")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RootCA indicates an expected call of RootCA.
func (mr *MockCertificateFetcherMockRecorder) RootCA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootCA", reflect.TypeOf((*MockCertificateFetcher)(nil).RootCA))
}
