{{range .}}
{{$op := . -}}
{{$opid := .OperationId -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}

{{range $name, $_ := $op.Spec.Responses}}
{{ if eq $name "204" }}
func (c *APIClient) {{$opid}}(ctx context.Context{{genParamArgs $op.PathParams}}) error {
	resp, err := c.client.{{$opid}}WithResponse(ctx{{genParamNames $op.PathParams}})
  if err != nil {
    return err
  }
  if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
  if resp.StatusCode() != http.StatusAccepted {
    return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
  }
  return nil
}
{{ else}}
{{range $typeDef := $op.GetResponseTypeDefinitions}}
{{ if eq $name $typeDef.ResponseName}}
{{ if ne $name "default" -}}
{{$responseType := $typeDef.Schema.TypeDecl}}
{{$isArray := $typeDef.Schema.ArrayType}}
{{if $op.HasBody}}
{{$typeDefs := getResponseTypeDefinitions $op -}}
{{range $op.Bodies}}
{{$body := . -}}
{{$bodyTypeDecl := .Schema.TypeDecl -}}
{{range $typeDefs}}
{{ if eq $bodyTypeDecl .Schema.TypeDecl -}}
{{/* set up all variables */}}
{{/* opid - name of operation */}}
{{/* requestNameInternal - name of internal request name */}}
{{$requestNameInternal := (print $opid $body.NameTag "RequestBody") -}}

func (c *APIClient) {{$opid}}(ctx context.Context{{genParamArgs $op.PathParams}}, body {{.Schema.TypeDecl}}) ({{if $isArray}}{{else}}*{{end}}{{$responseType}}, error) {
  resp, err := c.client.{{$opid}}{{$body.Suffix}}WithResponse(ctx{{genParamNames $op.PathParams}}, {{$requestNameInternal}}(body))
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON{{$name}} != nil {
		return resp.JSON{{$name}}, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}
{{- end}}{{/* if */}}

{{end}}{{/* range typeDefs */}}
{{end}}{{/* range Bodies */}}

{{else}}{{/* else HasBody */}}
func (c *APIClient) {{$opid}}(ctx context.Context{{genParamArgs $op.PathParams}}{{if $op.RequiresParamObject}}, params ...{{$opid}}Params{{end}}) ({{if $isArray}}{{else}}*{{end}}{{$responseType}}, error) {
  {{if $op.RequiresParamObject}}
  // only use the first parameter passed in
  // we're abusing variadics to make params optional
  parameters := &{{$opid}}Params{}
  if len(params) > 0 {
    parameters = &params[0]
  }
  {{end}}
  resp, err := c.client.{{$opid}}WithResponse(ctx{{genParamNames $op.PathParams}}{{if $op.RequiresParamObject}}, parameters{{end}})
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON{{$name}} != nil {
		return {{if $isArray}}*{{end}}resp.JSON{{$name}}, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}
{{end}}{{/* if HasBody */}}

{{end}}{{/* if */}}
{{end}}{{/* if */}}
{{end}}{{/* range GetResponseTypeDefinitions */}}
{{end}}{{/* if 204 */}}
{{end}}{{/* range Responses */}}
{{end}}{{/* range operations */}}
// End of User Generated Client

// Start generated server helpers

func sendError(w http.ResponseWriter, code int, message string) {
	send(w, code, Error{
		Code:    int32(code),
		Message: message,
	})
}

func send(w http.ResponseWriter, code int, object interface{}) {
	w.WriteHeader(code)
	json.NewEncoder(w).Encode(object)
}

func sendEmpty(w http.ResponseWriter, code int) {
	w.WriteHeader(code)
	w.Write([]byte("{}\n"))
}

// End generated server helpers