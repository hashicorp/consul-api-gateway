// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/andrewstucki/oapi-codegen version v1.10.2-0.20220902020913-b36ba463f350 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for HTTPHeaderMatchMatchOn.
const (
	HTTPHeaderMatchMatchOnExact             HTTPHeaderMatchMatchOn = "exact"
	HTTPHeaderMatchMatchOnPrefix            HTTPHeaderMatchMatchOn = "prefix"
	HTTPHeaderMatchMatchOnPresent           HTTPHeaderMatchMatchOn = "present"
	HTTPHeaderMatchMatchOnRegularExpression HTTPHeaderMatchMatchOn = "regularExpression"
	HTTPHeaderMatchMatchOnSuffix            HTTPHeaderMatchMatchOn = "suffix"
)

// Defines values for HTTPMatchMethod.
const (
	HTTPMatchMethodCONNECT HTTPMatchMethod = "CONNECT"
	HTTPMatchMethodDELETE  HTTPMatchMethod = "DELETE"
	HTTPMatchMethodGET     HTTPMatchMethod = "GET"
	HTTPMatchMethodHEAD    HTTPMatchMethod = "HEAD"
	HTTPMatchMethodOPTIONS HTTPMatchMethod = "OPTIONS"
	HTTPMatchMethodPATCH   HTTPMatchMethod = "PATCH"
	HTTPMatchMethodPOST    HTTPMatchMethod = "POST"
	HTTPMatchMethodPUT     HTTPMatchMethod = "PUT"
	HTTPMatchMethodTRACE   HTTPMatchMethod = "TRACE"
)

// Defines values for HTTPPathMatchMatchOn.
const (
	HTTPPathMatchMatchOnExact             HTTPPathMatchMatchOn = "exact"
	HTTPPathMatchMatchOnPrefix            HTTPPathMatchMatchOn = "prefix"
	HTTPPathMatchMatchOnRegularExpression HTTPPathMatchMatchOn = "regularExpression"
)

// Defines values for HTTPQueryMatchMatchOn.
const (
	HTTPQueryMatchMatchOnExact             HTTPQueryMatchMatchOn = "exact"
	HTTPQueryMatchMatchOnPresent           HTTPQueryMatchMatchOn = "present"
	HTTPQueryMatchMatchOnRegularExpression HTTPQueryMatchMatchOn = "regularExpression"
)

// Defines values for ListenerProtocol.
const (
	ListenerProtocolHttp ListenerProtocol = "http"
	ListenerProtocolTcp  ListenerProtocol = "tcp"
)

// Certificate defines model for Certificate.
type Certificate struct {
	Vault *VaultCertificate `json:"vault,omitempty"`
}

// ControllerHealth defines model for ControllerHealth.
type ControllerHealth struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Gateway defines model for Gateway.
type Gateway struct {
	Listeners []Listener             `json:"listeners"`
	Meta      map[string]interface{} `json:"meta,omitempty"`
	Name      string                 `json:"name"`
	Namespace *string                `json:"namespace,omitempty"`
}

// GatewayHealth defines model for GatewayHealth.
type GatewayHealth struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

// GatewayPage defines model for GatewayPage.
type GatewayPage struct {
	Gateways []Gateway              `json:"gateways"`
	Meta     map[string]interface{} `json:"meta,omitempty"`
}

// GatewayReference defines model for GatewayReference.
type GatewayReference struct {
	Listener  *string `json:"listener,omitempty"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

// HTTPFilters defines model for HTTPFilters.
type HTTPFilters struct {
	Headers []HTTPHeaderFilter `json:"headers,omitempty"`
}

// HTTPHeaderFilter defines model for HTTPHeaderFilter.
type HTTPHeaderFilter struct {
	Add    *map[string]string `json:"add,omitempty"`
	Remove []string           `json:"remove,omitempty"`
	Set    *map[string]string `json:"set,omitempty"`
}

// HTTPHeaderMatch defines model for HTTPHeaderMatch.
type HTTPHeaderMatch struct {
	MatchOn HTTPHeaderMatchMatchOn `json:"matchOn"`
	Name    string                 `json:"name"`
	Value   string                 `json:"value"`
}

// HTTPHeaderMatchMatchOn defines model for HTTPHeaderMatch.MatchOn.
type HTTPHeaderMatchMatchOn string

// HTTPMatch defines model for HTTPMatch.
type HTTPMatch struct {
	Headers []HTTPHeaderMatch `json:"headers,omitempty"`
	Method  *HTTPMatchMethod  `json:"method,omitempty"`
	Path    *HTTPPathMatch    `json:"path,omitempty"`
	Query   []HTTPQueryMatch  `json:"query,omitempty"`
}

// HTTPMatchMethod defines model for HTTPMatch.Method.
type HTTPMatchMethod string

// HTTPPathMatch defines model for HTTPPathMatch.
type HTTPPathMatch struct {
	MatchOn HTTPPathMatchMatchOn `json:"matchOn"`
	Value   string               `json:"value"`
}

// HTTPPathMatchMatchOn defines model for HTTPPathMatch.MatchOn.
type HTTPPathMatchMatchOn string

// HTTPQueryMatch defines model for HTTPQueryMatch.
type HTTPQueryMatch struct {
	MatchOn HTTPQueryMatchMatchOn `json:"matchOn"`
	Name    string                `json:"name"`
	Value   string                `json:"value"`
}

// HTTPQueryMatchMatchOn defines model for HTTPQueryMatch.MatchOn.
type HTTPQueryMatchMatchOn string

// HTTPRoute defines model for HTTPRoute.
type HTTPRoute struct {
	Gateways  []GatewayReference `json:"gateways"`
	Hostnames []string           `json:"hostnames,omitempty"`
	Name      string             `json:"name"`
	Namespace *string            `json:"namespace,omitempty"`
	Rules     []HTTPRouteRule    `json:"rules"`
}

// HTTPRoutePage defines model for HTTPRoutePage.
type HTTPRoutePage struct {
	Meta   map[string]interface{} `json:"meta,omitempty"`
	Routes []HTTPRoute            `json:"routes"`
}

// HTTPRouteRule defines model for HTTPRouteRule.
type HTTPRouteRule struct {
	Filters  *HTTPFilters  `json:"filters,omitempty"`
	Matches  []HTTPMatch   `json:"matches,omitempty"`
	Services []HTTPService `json:"services"`
}

// HTTPService defines model for HTTPService.
type HTTPService struct {
	Filters   *HTTPFilters `json:"filters,omitempty"`
	Name      string       `json:"name"`
	Namespace *string      `json:"namespace,omitempty"`
	Weight    *int         `json:"weight,omitempty"`
}

// HealthStatus defines model for HealthStatus.
type HealthStatus struct {
	Controllers []ControllerHealth `json:"controllers"`
	Gateways    []GatewayHealth    `json:"gateways"`
}

// Listener defines model for Listener.
type Listener struct {
	Hostname string            `json:"hostname"`
	Name     *string           `json:"name,omitempty"`
	Port     int               `json:"port"`
	Protocol ListenerProtocol  `json:"protocol"`
	Tls      *TLSConfiguration `json:"tls,omitempty"`
}

// ListenerProtocol defines model for Listener.Protocol.
type ListenerProtocol string

// TCPRoute defines model for TCPRoute.
type TCPRoute struct {
	Gateways  []GatewayReference `json:"gateways"`
	Name      string             `json:"name"`
	Namespace *string            `json:"namespace,omitempty"`
	Services  []TCPService       `json:"services"`
}

// TCPRoutePage defines model for TCPRoutePage.
type TCPRoutePage struct {
	Meta   map[string]interface{} `json:"meta,omitempty"`
	Routes []TCPRoute             `json:"routes"`
}

// TCPService defines model for TCPService.
type TCPService struct {
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	Weight    *int    `json:"weight,omitempty"`
}

// TLSConfiguration defines model for TLSConfiguration.
type TLSConfiguration struct {
	Certificates []Certificate `json:"certificates,omitempty"`
	CipherSuites []string      `json:"cipherSuites,omitempty"`
	MaxVersion   *string       `json:"maxVersion,omitempty"`
	MinVersion   *string       `json:"minVersion,omitempty"`
}

// VaultCertificate defines model for VaultCertificate.
type VaultCertificate struct {
	ChainField      string `json:"chainField"`
	Path            string `json:"path"`
	PrivateKeyField string `json:"privateKeyField"`
}

// ListGatewaysParams defines parameters for ListGateways.
type ListGatewaysParams struct {
	// Namespaces The namespaces of gateways to list
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// ListHTTPRoutesParams defines parameters for ListHTTPRoutes.
type ListHTTPRoutesParams struct {
	// Namespaces The namespaces of routes to list
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// ListTCPRoutesParams defines parameters for ListTCPRoutes.
type ListTCPRoutesParams struct {
	// Namespaces Namespaces of routes to fetch
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// CreateGatewayJSONRequestBody defines body for CreateGateway for application/json ContentType.
type CreateGatewayJSONRequestBody = Gateway

// CreateHTTPRouteJSONRequestBody defines body for CreateHTTPRoute for application/json ContentType.
type CreateHTTPRouteJSONRequestBody = HTTPRoute

// CreateTCPRouteJSONRequestBody defines body for CreateTCPRoute for application/json ContentType.
type CreateTCPRouteJSONRequestBody = TCPRoute

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListGateways request
	ListGateways(ctx context.Context, params *ListGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGateway request with any body
	CreateGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGateway(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGateway request
	DeleteGateway(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGateway request
	GetGateway(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHTTPRoutes request
	ListHTTPRoutes(ctx context.Context, params *ListHTTPRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHTTPRoute request with any body
	CreateHTTPRouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHTTPRoute(ctx context.Context, body CreateHTTPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPRoute request
	DeleteHTTPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPRoute request
	GetHTTPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGatewaysInNamespace request
	ListGatewaysInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayInNamespace request
	DeleteGatewayInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayInNamespace request
	GetGatewayInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHTTPRoutesInNamespace request
	ListHTTPRoutesInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHTTPRouteInNamespace request
	DeleteHTTPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHTTPRouteInNamespace request
	GetHTTPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTCPRoutesInNamespace request
	ListTCPRoutesInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPRouteInNamespace request
	DeleteTCPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPRouteInNamespace request
	GetTCPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTCPRoutes request
	ListTCPRoutes(ctx context.Context, params *ListTCPRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTCPRoute request with any body
	CreateTCPRouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTCPRoute(ctx context.Context, body CreateTCPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTCPRoute request
	DeleteTCPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTCPRoute request
	GetTCPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListGateways(ctx context.Context, params *ListGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGatewayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGateway(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGatewayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGateway(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGateway(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHTTPRoutes(ctx context.Context, params *ListHTTPRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHTTPRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRouteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHTTPRoute(ctx context.Context, body CreateHTTPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHTTPRouteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPRouteRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPRouteRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGatewaysInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGatewaysInNamespaceRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHTTPRoutesInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHTTPRoutesInNamespaceRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHTTPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHTTPRouteInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHTTPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHTTPRouteInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTCPRoutesInNamespace(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTCPRoutesInNamespaceRequest(c.Server, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPRouteInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPRouteInNamespace(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPRouteInNamespaceRequest(c.Server, namespace, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTCPRoutes(ctx context.Context, params *ListTCPRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTCPRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRouteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRouteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTCPRoute(ctx context.Context, body CreateTCPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTCPRouteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTCPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTCPRouteRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTCPRoute(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTCPRouteRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListGatewaysRequest generates requests for ListGateways
func NewListGatewaysRequest(server string, params *ListGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Namespaces != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGatewayRequest calls the generic CreateGateway builder with application/json body
func NewCreateGatewayRequest(server string, body CreateGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGatewayRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGatewayRequestWithBody generates requests for CreateGateway with any type of body
func NewCreateGatewayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayRequest generates requests for DeleteGateway
func NewDeleteGatewayRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayRequest generates requests for GetGateway
func NewGetGatewayRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHTTPRoutesRequest generates requests for ListHTTPRoutes
func NewListHTTPRoutesRequest(server string, params *ListHTTPRoutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/http-routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Namespaces != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHTTPRouteRequest calls the generic CreateHTTPRoute builder with application/json body
func NewCreateHTTPRouteRequest(server string, body CreateHTTPRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHTTPRouteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHTTPRouteRequestWithBody generates requests for CreateHTTPRoute with any type of body
func NewCreateHTTPRouteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/http-routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHTTPRouteRequest generates requests for DeleteHTTPRoute
func NewDeleteHTTPRouteRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/http-routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPRouteRequest generates requests for GetHTTPRoute
func NewGetHTTPRouteRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/http-routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGatewaysInNamespaceRequest generates requests for ListGatewaysInNamespace
func NewListGatewaysInNamespaceRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/gateways", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewayInNamespaceRequest generates requests for DeleteGatewayInNamespace
func NewDeleteGatewayInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/gateways/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayInNamespaceRequest generates requests for GetGatewayInNamespace
func NewGetGatewayInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/gateways/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHTTPRoutesInNamespaceRequest generates requests for ListHTTPRoutesInNamespace
func NewListHTTPRoutesInNamespaceRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/http-routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteHTTPRouteInNamespaceRequest generates requests for DeleteHTTPRouteInNamespace
func NewDeleteHTTPRouteInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/http-routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHTTPRouteInNamespaceRequest generates requests for GetHTTPRouteInNamespace
func NewGetHTTPRouteInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/http-routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTCPRoutesInNamespaceRequest generates requests for ListTCPRoutesInNamespace
func NewListTCPRoutesInNamespaceRequest(server string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/tcp-routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTCPRouteInNamespaceRequest generates requests for DeleteTCPRouteInNamespace
func NewDeleteTCPRouteInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/tcp-routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPRouteInNamespaceRequest generates requests for GetTCPRouteInNamespace
func NewGetTCPRouteInNamespaceRequest(server string, namespace string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/tcp-routes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTCPRoutesRequest generates requests for ListTCPRoutes
func NewListTCPRoutesRequest(server string, params *ListTCPRoutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tcp-routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Namespaces != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaces", runtime.ParamLocationQuery, *params.Namespaces); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTCPRouteRequest calls the generic CreateTCPRoute builder with application/json body
func NewCreateTCPRouteRequest(server string, body CreateTCPRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTCPRouteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTCPRouteRequestWithBody generates requests for CreateTCPRoute with any type of body
func NewCreateTCPRouteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tcp-routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTCPRouteRequest generates requests for DeleteTCPRoute
func NewDeleteTCPRouteRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tcp-routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTCPRouteRequest generates requests for GetTCPRoute
func NewGetTCPRouteRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tcp-routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListGateways request
	ListGatewaysWithResponse(ctx context.Context, params *ListGatewaysParams, reqEditors ...RequestEditorFn) (*ListGatewaysResponse, error)

	// CreateGateway request with any body
	CreateGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error)

	CreateGatewayWithResponse(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error)

	// DeleteGateway request
	DeleteGatewayWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteGatewayResponse, error)

	// GetGateway request
	GetGatewayWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetGatewayResponse, error)

	// Health request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)

	// ListHTTPRoutes request
	ListHTTPRoutesWithResponse(ctx context.Context, params *ListHTTPRoutesParams, reqEditors ...RequestEditorFn) (*ListHTTPRoutesResponse, error)

	// CreateHTTPRoute request with any body
	CreateHTTPRouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRouteResponse, error)

	CreateHTTPRouteWithResponse(ctx context.Context, body CreateHTTPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRouteResponse, error)

	// DeleteHTTPRoute request
	DeleteHTTPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteHTTPRouteResponse, error)

	// GetHTTPRoute request
	GetHTTPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHTTPRouteResponse, error)

	// ListGatewaysInNamespace request
	ListGatewaysInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListGatewaysInNamespaceResponse, error)

	// DeleteGatewayInNamespace request
	DeleteGatewayInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteGatewayInNamespaceResponse, error)

	// GetGatewayInNamespace request
	GetGatewayInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetGatewayInNamespaceResponse, error)

	// ListHTTPRoutesInNamespace request
	ListHTTPRoutesInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListHTTPRoutesInNamespaceResponse, error)

	// DeleteHTTPRouteInNamespace request
	DeleteHTTPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteHTTPRouteInNamespaceResponse, error)

	// GetHTTPRouteInNamespace request
	GetHTTPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetHTTPRouteInNamespaceResponse, error)

	// ListTCPRoutesInNamespace request
	ListTCPRoutesInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListTCPRoutesInNamespaceResponse, error)

	// DeleteTCPRouteInNamespace request
	DeleteTCPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteTCPRouteInNamespaceResponse, error)

	// GetTCPRouteInNamespace request
	GetTCPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetTCPRouteInNamespaceResponse, error)

	// ListTCPRoutes request
	ListTCPRoutesWithResponse(ctx context.Context, params *ListTCPRoutesParams, reqEditors ...RequestEditorFn) (*ListTCPRoutesResponse, error)

	// CreateTCPRoute request with any body
	CreateTCPRouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRouteResponse, error)

	CreateTCPRouteWithResponse(ctx context.Context, body CreateTCPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRouteResponse, error)

	// DeleteTCPRoute request
	DeleteTCPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteTCPRouteResponse, error)

	// GetTCPRoute request
	GetTCPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetTCPRouteResponse, error)
}

type ListGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayPage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Gateway
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Gateway
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthStatus
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHTTPRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPRoutePage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListHTTPRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHTTPRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHTTPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HTTPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateHTTPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHTTPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetHTTPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGatewaysInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GatewayPage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListGatewaysInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGatewaysInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Gateway
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetGatewayInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHTTPRoutesInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPRoutePage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListHTTPRoutesInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHTTPRoutesInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHTTPRouteInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteHTTPRouteInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHTTPRouteInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHTTPRouteInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HTTPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetHTTPRouteInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHTTPRouteInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTCPRoutesInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TCPRoutePage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListTCPRoutesInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTCPRoutesInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPRouteInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTCPRouteInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPRouteInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPRouteInNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TCPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTCPRouteInNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPRouteInNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTCPRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TCPRoutePage
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListTCPRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTCPRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTCPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TCPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateTCPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTCPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTCPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTCPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTCPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTCPRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TCPRoute
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetTCPRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTCPRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListGatewaysWithResponse request returning *ListGatewaysResponse
func (c *ClientWithResponses) ListGatewaysWithResponse(ctx context.Context, params *ListGatewaysParams, reqEditors ...RequestEditorFn) (*ListGatewaysResponse, error) {
	rsp, err := c.ListGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGatewaysResponse(rsp)
}

// CreateGatewayWithBodyWithResponse request with arbitrary body returning *CreateGatewayResponse
func (c *ClientWithResponses) CreateGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error) {
	rsp, err := c.CreateGatewayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGatewayResponse(rsp)
}

func (c *ClientWithResponses) CreateGatewayWithResponse(ctx context.Context, body CreateGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGatewayResponse, error) {
	rsp, err := c.CreateGateway(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGatewayResponse(rsp)
}

// DeleteGatewayWithResponse request returning *DeleteGatewayResponse
func (c *ClientWithResponses) DeleteGatewayWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteGatewayResponse, error) {
	rsp, err := c.DeleteGateway(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayResponse(rsp)
}

// GetGatewayWithResponse request returning *GetGatewayResponse
func (c *ClientWithResponses) GetGatewayWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetGatewayResponse, error) {
	rsp, err := c.GetGateway(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ListHTTPRoutesWithResponse request returning *ListHTTPRoutesResponse
func (c *ClientWithResponses) ListHTTPRoutesWithResponse(ctx context.Context, params *ListHTTPRoutesParams, reqEditors ...RequestEditorFn) (*ListHTTPRoutesResponse, error) {
	rsp, err := c.ListHTTPRoutes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHTTPRoutesResponse(rsp)
}

// CreateHTTPRouteWithBodyWithResponse request with arbitrary body returning *CreateHTTPRouteResponse
func (c *ClientWithResponses) CreateHTTPRouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHTTPRouteResponse, error) {
	rsp, err := c.CreateHTTPRouteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRouteResponse(rsp)
}

func (c *ClientWithResponses) CreateHTTPRouteWithResponse(ctx context.Context, body CreateHTTPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHTTPRouteResponse, error) {
	rsp, err := c.CreateHTTPRoute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHTTPRouteResponse(rsp)
}

// DeleteHTTPRouteWithResponse request returning *DeleteHTTPRouteResponse
func (c *ClientWithResponses) DeleteHTTPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteHTTPRouteResponse, error) {
	rsp, err := c.DeleteHTTPRoute(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPRouteResponse(rsp)
}

// GetHTTPRouteWithResponse request returning *GetHTTPRouteResponse
func (c *ClientWithResponses) GetHTTPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetHTTPRouteResponse, error) {
	rsp, err := c.GetHTTPRoute(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPRouteResponse(rsp)
}

// ListGatewaysInNamespaceWithResponse request returning *ListGatewaysInNamespaceResponse
func (c *ClientWithResponses) ListGatewaysInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListGatewaysInNamespaceResponse, error) {
	rsp, err := c.ListGatewaysInNamespace(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGatewaysInNamespaceResponse(rsp)
}

// DeleteGatewayInNamespaceWithResponse request returning *DeleteGatewayInNamespaceResponse
func (c *ClientWithResponses) DeleteGatewayInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteGatewayInNamespaceResponse, error) {
	rsp, err := c.DeleteGatewayInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayInNamespaceResponse(rsp)
}

// GetGatewayInNamespaceWithResponse request returning *GetGatewayInNamespaceResponse
func (c *ClientWithResponses) GetGatewayInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetGatewayInNamespaceResponse, error) {
	rsp, err := c.GetGatewayInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayInNamespaceResponse(rsp)
}

// ListHTTPRoutesInNamespaceWithResponse request returning *ListHTTPRoutesInNamespaceResponse
func (c *ClientWithResponses) ListHTTPRoutesInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListHTTPRoutesInNamespaceResponse, error) {
	rsp, err := c.ListHTTPRoutesInNamespace(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHTTPRoutesInNamespaceResponse(rsp)
}

// DeleteHTTPRouteInNamespaceWithResponse request returning *DeleteHTTPRouteInNamespaceResponse
func (c *ClientWithResponses) DeleteHTTPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteHTTPRouteInNamespaceResponse, error) {
	rsp, err := c.DeleteHTTPRouteInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHTTPRouteInNamespaceResponse(rsp)
}

// GetHTTPRouteInNamespaceWithResponse request returning *GetHTTPRouteInNamespaceResponse
func (c *ClientWithResponses) GetHTTPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetHTTPRouteInNamespaceResponse, error) {
	rsp, err := c.GetHTTPRouteInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHTTPRouteInNamespaceResponse(rsp)
}

// ListTCPRoutesInNamespaceWithResponse request returning *ListTCPRoutesInNamespaceResponse
func (c *ClientWithResponses) ListTCPRoutesInNamespaceWithResponse(ctx context.Context, namespace string, reqEditors ...RequestEditorFn) (*ListTCPRoutesInNamespaceResponse, error) {
	rsp, err := c.ListTCPRoutesInNamespace(ctx, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTCPRoutesInNamespaceResponse(rsp)
}

// DeleteTCPRouteInNamespaceWithResponse request returning *DeleteTCPRouteInNamespaceResponse
func (c *ClientWithResponses) DeleteTCPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*DeleteTCPRouteInNamespaceResponse, error) {
	rsp, err := c.DeleteTCPRouteInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPRouteInNamespaceResponse(rsp)
}

// GetTCPRouteInNamespaceWithResponse request returning *GetTCPRouteInNamespaceResponse
func (c *ClientWithResponses) GetTCPRouteInNamespaceWithResponse(ctx context.Context, namespace string, name string, reqEditors ...RequestEditorFn) (*GetTCPRouteInNamespaceResponse, error) {
	rsp, err := c.GetTCPRouteInNamespace(ctx, namespace, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPRouteInNamespaceResponse(rsp)
}

// ListTCPRoutesWithResponse request returning *ListTCPRoutesResponse
func (c *ClientWithResponses) ListTCPRoutesWithResponse(ctx context.Context, params *ListTCPRoutesParams, reqEditors ...RequestEditorFn) (*ListTCPRoutesResponse, error) {
	rsp, err := c.ListTCPRoutes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTCPRoutesResponse(rsp)
}

// CreateTCPRouteWithBodyWithResponse request with arbitrary body returning *CreateTCPRouteResponse
func (c *ClientWithResponses) CreateTCPRouteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTCPRouteResponse, error) {
	rsp, err := c.CreateTCPRouteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRouteResponse(rsp)
}

func (c *ClientWithResponses) CreateTCPRouteWithResponse(ctx context.Context, body CreateTCPRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTCPRouteResponse, error) {
	rsp, err := c.CreateTCPRoute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTCPRouteResponse(rsp)
}

// DeleteTCPRouteWithResponse request returning *DeleteTCPRouteResponse
func (c *ClientWithResponses) DeleteTCPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteTCPRouteResponse, error) {
	rsp, err := c.DeleteTCPRoute(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTCPRouteResponse(rsp)
}

// GetTCPRouteWithResponse request returning *GetTCPRouteResponse
func (c *ClientWithResponses) GetTCPRouteWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetTCPRouteResponse, error) {
	rsp, err := c.GetTCPRoute(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTCPRouteResponse(rsp)
}

// ParseListGatewaysResponse parses an HTTP response from a ListGatewaysWithResponse call
func ParseListGatewaysResponse(rsp *http.Response) (*ListGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGatewayResponse parses an HTTP response from a CreateGatewayWithResponse call
func ParseCreateGatewayResponse(rsp *http.Response) (*CreateGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Gateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGatewayResponse parses an HTTP response from a DeleteGatewayWithResponse call
func ParseDeleteGatewayResponse(rsp *http.Response) (*DeleteGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGatewayResponse parses an HTTP response from a GetGatewayWithResponse call
func ParseGetGatewayResponse(rsp *http.Response) (*GetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Gateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListHTTPRoutesResponse parses an HTTP response from a ListHTTPRoutesWithResponse call
func ParseListHTTPRoutesResponse(rsp *http.Response) (*ListHTTPRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHTTPRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPRoutePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHTTPRouteResponse parses an HTTP response from a CreateHTTPRouteWithResponse call
func ParseCreateHTTPRouteResponse(rsp *http.Response) (*CreateHTTPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHTTPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HTTPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPRouteResponse parses an HTTP response from a DeleteHTTPRouteWithResponse call
func ParseDeleteHTTPRouteResponse(rsp *http.Response) (*DeleteHTTPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPRouteResponse parses an HTTP response from a GetHTTPRouteWithResponse call
func ParseGetHTTPRouteResponse(rsp *http.Response) (*GetHTTPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListGatewaysInNamespaceResponse parses an HTTP response from a ListGatewaysInNamespaceWithResponse call
func ParseListGatewaysInNamespaceResponse(rsp *http.Response) (*ListGatewaysInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGatewaysInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GatewayPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteGatewayInNamespaceResponse parses an HTTP response from a DeleteGatewayInNamespaceWithResponse call
func ParseDeleteGatewayInNamespaceResponse(rsp *http.Response) (*DeleteGatewayInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetGatewayInNamespaceResponse parses an HTTP response from a GetGatewayInNamespaceWithResponse call
func ParseGetGatewayInNamespaceResponse(rsp *http.Response) (*GetGatewayInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Gateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListHTTPRoutesInNamespaceResponse parses an HTTP response from a ListHTTPRoutesInNamespaceWithResponse call
func ParseListHTTPRoutesInNamespaceResponse(rsp *http.Response) (*ListHTTPRoutesInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHTTPRoutesInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPRoutePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteHTTPRouteInNamespaceResponse parses an HTTP response from a DeleteHTTPRouteInNamespaceWithResponse call
func ParseDeleteHTTPRouteInNamespaceResponse(rsp *http.Response) (*DeleteHTTPRouteInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHTTPRouteInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHTTPRouteInNamespaceResponse parses an HTTP response from a GetHTTPRouteInNamespaceWithResponse call
func ParseGetHTTPRouteInNamespaceResponse(rsp *http.Response) (*GetHTTPRouteInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHTTPRouteInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HTTPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListTCPRoutesInNamespaceResponse parses an HTTP response from a ListTCPRoutesInNamespaceWithResponse call
func ParseListTCPRoutesInNamespaceResponse(rsp *http.Response) (*ListTCPRoutesInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTCPRoutesInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TCPRoutePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPRouteInNamespaceResponse parses an HTTP response from a DeleteTCPRouteInNamespaceWithResponse call
func ParseDeleteTCPRouteInNamespaceResponse(rsp *http.Response) (*DeleteTCPRouteInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPRouteInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPRouteInNamespaceResponse parses an HTTP response from a GetTCPRouteInNamespaceWithResponse call
func ParseGetTCPRouteInNamespaceResponse(rsp *http.Response) (*GetTCPRouteInNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPRouteInNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TCPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListTCPRoutesResponse parses an HTTP response from a ListTCPRoutesWithResponse call
func ParseListTCPRoutesResponse(rsp *http.Response) (*ListTCPRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTCPRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TCPRoutePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateTCPRouteResponse parses an HTTP response from a CreateTCPRouteWithResponse call
func ParseCreateTCPRouteResponse(rsp *http.Response) (*CreateTCPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTCPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TCPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteTCPRouteResponse parses an HTTP response from a DeleteTCPRouteWithResponse call
func ParseDeleteTCPRouteResponse(rsp *http.Response) (*DeleteTCPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTCPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTCPRouteResponse parses an HTTP response from a GetTCPRouteWithResponse call
func ParseGetTCPRouteResponse(rsp *http.Response) (*GetTCPRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTCPRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TCPRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateways)
	ListGateways(w http.ResponseWriter, r *http.Request, params ListGatewaysParams)

	// (POST /gateways)
	CreateGateway(w http.ResponseWriter, r *http.Request)

	// (DELETE /gateways/{name})
	DeleteGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /gateways/{name})
	GetGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /health)
	Health(w http.ResponseWriter, r *http.Request)

	// (GET /http-routes)
	ListHTTPRoutes(w http.ResponseWriter, r *http.Request, params ListHTTPRoutesParams)

	// (POST /http-routes)
	CreateHTTPRoute(w http.ResponseWriter, r *http.Request)

	// (DELETE /http-routes/{name})
	DeleteHTTPRoute(w http.ResponseWriter, r *http.Request, name string)

	// (GET /http-routes/{name})
	GetHTTPRoute(w http.ResponseWriter, r *http.Request, name string)

	// (GET /namespaces/{namespace}/gateways)
	ListGatewaysInNamespace(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/gateways/{name})
	DeleteGatewayInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/gateways/{name})
	GetGatewayInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/http-routes)
	ListHTTPRoutesInNamespace(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/http-routes/{name})
	DeleteHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/http-routes/{name})
	GetHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/tcp-routes)
	ListTCPRoutesInNamespace(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/tcp-routes/{name})
	DeleteTCPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/tcp-routes/{name})
	GetTCPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /tcp-routes)
	ListTCPRoutes(w http.ResponseWriter, r *http.Request, params ListTCPRoutesParams)

	// (POST /tcp-routes)
	CreateTCPRoute(w http.ResponseWriter, r *http.Request)

	// (DELETE /tcp-routes/{name})
	DeleteTCPRoute(w http.ResponseWriter, r *http.Request, name string)

	// (GET /tcp-routes/{name})
	GetTCPRoute(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListGateways operation middleware
func (siw *ServerInterfaceWrapper) ListGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGatewaysParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGateways(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGateway operation middleware
func (siw *ServerInterfaceWrapper) CreateGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGateway(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGateway operation middleware
func (siw *ServerInterfaceWrapper) GetGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHTTPRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListHTTPRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHTTPRoutesParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHTTPRoutes(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) CreateHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateHTTPRoute(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) DeleteHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHTTPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGatewaysInNamespace operation middleware
func (siw *ServerInterfaceWrapper) ListGatewaysInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGatewaysInNamespace(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGatewayInNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteGatewayInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGatewayInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGatewayInNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetGatewayInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGatewayInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHTTPRoutesInNamespace operation middleware
func (siw *ServerInterfaceWrapper) ListHTTPRoutesInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHTTPRoutesInNamespace(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHTTPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHTTPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHTTPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTCPRoutesInNamespace operation middleware
func (siw *ServerInterfaceWrapper) ListTCPRoutesInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTCPRoutesInNamespace(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTCPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteTCPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTCPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTCPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetTCPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTCPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTCPRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListTCPRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTCPRoutesParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTCPRoutes(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) CreateTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTCPRoute(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) DeleteTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTCPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) GetTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTCPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways", wrapper.ListGateways)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gateways", wrapper.CreateGateway)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/gateways/{name}", wrapper.DeleteGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways/{name}", wrapper.GetGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/http-routes", wrapper.ListHTTPRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/http-routes", wrapper.CreateHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/http-routes/{name}", wrapper.DeleteHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/http-routes/{name}", wrapper.GetHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways", wrapper.ListGatewaysInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.DeleteGatewayInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.GetGatewayInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/http-routes", wrapper.ListHTTPRoutesInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/http-routes/{name}", wrapper.DeleteHTTPRouteInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/http-routes/{name}", wrapper.GetHTTPRouteInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/tcp-routes", wrapper.ListTCPRoutesInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/tcp-routes/{name}", wrapper.DeleteTCPRouteInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/tcp-routes/{name}", wrapper.GetTCPRouteInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tcp-routes", wrapper.ListTCPRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tcp-routes", wrapper.CreateTCPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tcp-routes/{name}", wrapper.DeleteTCPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tcp-routes/{name}", wrapper.GetTCPRoute)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa21PbuBr/Vzw65+mMSYCe7kOelk1TYMolS9LOzrSdqWp/jtW1JVeSgSyT/31Hlq/x",
	"JXYSINnNCxhb+q6/7ybxhCzmB4wClQINnpCwXPBx9DgELolDLCxB/RlwFqg3EH28x6En1cN/OThogP7T",
	"z+j0YyL9T2pRnsxiYSI5DwANEPv+AyyJFiYaMio58zzgF4A96ZaZEVv9jDcKyQmdqY0U+1D5QUgsQ1Hx",
	"aWEiDj9DwsFGg8+agKnIp3u+Vgg44pzxslQWsyP2DuM+lmiACJVvTlFKgFAJM+CKgg9C4Fm02if0CuhM",
	"qXlirpAv2WZqXlWynWMJD3hels4jQgIFrg0owRervHUV74gEJvRS78mExJzjudZG4pxxM2EShzTqqJeJ",
	"AFvQ2kOZMg022FH0xNKNY/8XZZvpj+2dlPh70dotS1KnHBtkvQMHOFAL6mHVaNIt+79K0ovpdPyeeDIG",
	"eFFIF7DdBfmK2EW0R5MsW3dRI0JhV0kObNvxLyIJo9gbFz6XDFNiwcFn91DQo25TCgMBchOmzZpeY2lV",
	"hJivXt9S9Qg09JXn4BFbEpko4OCQRxUioaMfAg4CqPrGYRZ6mI8e1StBGM25uowqGxxddFLapaX32Atb",
	"oCoR10xiWO+rw1mN0uujTBOsDmGX2XkzDm9vbkbDKTLRu9HVaDpCJjofqT8vRmfvkIlux9PL25sJMtH4",
	"bDq8UL9vJ+r7+KP6Ob07G44qrRpgnStXSTzG0k3l/RkCn3dS+He1o0bfOqhlLNcCWjtUdYZKM0ZyenYU",
	"eq1YeCHk37FQbrFqZXVlVYvhMiGjMtEt922hAJmIhx50i+rITHeht0qv6gYitWbCutEb1X1EbUvG1Z41",
	"tKmM1rzwMeFGWSOTlGR1srK9SpSkwiuzKuR21KQ2zwrg98TqSG2iN3XzccqpzlAJ1S2ZaSsR8ABk5src",
	"p3SUad2eRb34JO2klyenZOJr74HSlFjh1nXzUh3FJW3zYpvNjfRVrk1e6hrizFbsaP6HuiT7gHGpC8sj",
	"8VVB+eXt2zdvI1jqv0+qhtCAM8ks5uXrkCtloFhbQWW5kd5KE06vJkNGHTILOVb9ZslqqcKx3DlBqiw3",
	"Hb5e1dlK8HTOLdNhIbXgx0zATWpJY+ZJrPy81ST15QbFJGedkpw7kuxKIVBOeNkZWIeMlz84K4PVIoEL",
	"fBIS2bVL8vHjJ+AilrS03Ce0/nNVz1465ivr72JC3xPw7BbuSiaTVcs4uccSPsC8HeElb0ZczLxkZZJf",
	"q6ZjAVbIiZxPlJu0emcB+QDzs1DLTSgaxMNh0mcP0B9HQ0ZF6B1N2Z9As2yPo61ooSgT6rCkPKrxQOVp",
	"HxMPDdQrtRkH5CgO8V9dLFxiMR70LOZnjDQb42x8acT5z5gCVgtCriipjD/o94u7FyayQVicBBq/VVSu",
	"McUz8IFK9To6lLOACsgCEV2zv4jnYWMcfveIZVzpBcZp77jAXgz6/YeHh56vl/cYn/WBHn2c9K/HV/3T",
	"3nE/Qi2RXrVCamxJAIpOese9Y7WeBUBxQNAAvYleaSBF/unnS8dMn48U9b0DGXIqDOx5hhXHMthGsq+H",
	"Ivo6vC9tNIgK/HmWbAPMsQ+6X/u8THzqgpHmIGEwJ6VrSGZ4RKiiGKFGz9epL7NNKp9HaaEqJL8qZIuA",
	"UaHheHp8nMBIzZaDJ4SDwFOhSRjt/xA6sDN6LWpoVCcikBZVixUxEv4aSU5yObAVEfTxewXzkMJjAJYE",
	"24BsTcBEhYOHHFTyNbBB4SGxf9mtelmGM5UxQMjfmD3ftkmrNEpiTTLDiiRB+aQleQiLkq9PXkKwnfPz",
	"wsyiuv+kAmWhne6BhLL79XvlfkHozIMEAQahhnTB+PYlUecL+pYFq/EdC7ANphep14YIlYJgl6DzLmKR",
	"QacxJdwoUlkiUA6PRY8zQVyecomgBIVuKeH/ZaMkzDVnewditzk3d3Sa4ygLEymMkJKfofZfOeTPQa7v",
	"NAek5T6bz47/taHtpnd5jZDQywx9+6Zco+o3h5mavlX9Tiq0galt5Mb3MgriI4BndEHhSKTCFLEuu+UG",
	"KYOjbOhb2Tqp9YZevyJIqzuq9ORwjZ4qZrvzHVXxJLfCGZEi+9ZRZZ6va6qyo+XnaatyR9dlxdKPCh/Y",
	"tl+0r2qUbMe8vRT167RWGRS23l3lMdSqVOdkeZUWS7PekwZLeaGz89p3WZ2dl/ptX7qsfQv0rBrqOI+e",
	"FxufliTImZF7oKtKftKiXdKb9Ji2BT40BpeOUlbgJCG+Uy353pystADMJoN4oRbctJ+0N8TNs8DGPIz7",
	"26lGS+DoPNHvKzgOxwovmr82HHNxu0qXDbcdYFmYc+vH3HpgHobc7YFjO9PQElg2mILWTW/FqejlMtxh",
	"Glt/Glt/3FoXJa8AkMPE9zo5Tlqd6p+0lk95WxXA5N+BxEaI3L9Jr/DPVv8QnKxTClPYtKqEbWbAxLLr",
	"AiqT6EXTXIHtoQyuLINtgdO+OG4KnENtbJ/29iTlbVwDO910prWwNexEQwXcvVvOPat57S45U5/X3XGm",
	"kH+eK86miEq+vcYF595G+la6mFa3m126mbb3Y4c2YsM2YmtXm109d6jlzxjhi8XfAQAA//+jYwv91UQA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
