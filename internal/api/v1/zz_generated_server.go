// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/andrewstucki/oapi-codegen version v1.10.2-0.20220902020913-b36ba463f350 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for HTTPHeaderMatchMatchOn.
const (
	HTTPHeaderMatchMatchOnExact             HTTPHeaderMatchMatchOn = "exact"
	HTTPHeaderMatchMatchOnPrefix            HTTPHeaderMatchMatchOn = "prefix"
	HTTPHeaderMatchMatchOnPresent           HTTPHeaderMatchMatchOn = "present"
	HTTPHeaderMatchMatchOnRegularExpression HTTPHeaderMatchMatchOn = "regularExpression"
	HTTPHeaderMatchMatchOnSuffix            HTTPHeaderMatchMatchOn = "suffix"
)

// Defines values for HTTPMatchMethod.
const (
	CONNECT HTTPMatchMethod = "CONNECT"
	DELETE  HTTPMatchMethod = "DELETE"
	GET     HTTPMatchMethod = "GET"
	HEAD    HTTPMatchMethod = "HEAD"
	OPTIONS HTTPMatchMethod = "OPTIONS"
	PATCH   HTTPMatchMethod = "PATCH"
	POST    HTTPMatchMethod = "POST"
	PUT     HTTPMatchMethod = "PUT"
	TRACE   HTTPMatchMethod = "TRACE"
)

// Defines values for HTTPPathMatchMatchOn.
const (
	HTTPPathMatchMatchOnExact             HTTPPathMatchMatchOn = "exact"
	HTTPPathMatchMatchOnPrefix            HTTPPathMatchMatchOn = "prefix"
	HTTPPathMatchMatchOnRegularExpression HTTPPathMatchMatchOn = "regularExpression"
)

// Defines values for HTTPQueryMatchMatchOn.
const (
	Exact             HTTPQueryMatchMatchOn = "exact"
	Present           HTTPQueryMatchMatchOn = "present"
	RegularExpression HTTPQueryMatchMatchOn = "regularExpression"
)

// Defines values for ListenerProtocol.
const (
	Http ListenerProtocol = "http"
	Tcp  ListenerProtocol = "tcp"
)

// Certificate defines model for Certificate.
type Certificate struct {
	Vault *VaultCertificate `json:"vault,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Gateway defines model for Gateway.
type Gateway struct {
	Listeners []Listener             `json:"listeners"`
	Meta      map[string]interface{} `json:"meta,omitempty"`
	Name      string                 `json:"name"`
	Namespace string                 `json:"namespace"`
}

// GatewayPage defines model for GatewayPage.
type GatewayPage struct {
	Gateways []Gateway              `json:"gateways"`
	Meta     map[string]interface{} `json:"meta,omitempty"`
}

// GatewayReference defines model for GatewayReference.
type GatewayReference struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// HTTPFilters defines model for HTTPFilters.
type HTTPFilters struct {
	Headers []HTTPHeaderFilter `json:"headers,omitempty"`
}

// HTTPHeaderFilter defines model for HTTPHeaderFilter.
type HTTPHeaderFilter struct {
	Add    *map[string]string `json:"add,omitempty"`
	Remove []string           `json:"remove,omitempty"`
	Set    *map[string]string `json:"set,omitempty"`
}

// HTTPHeaderMatch defines model for HTTPHeaderMatch.
type HTTPHeaderMatch struct {
	MatchOn HTTPHeaderMatchMatchOn `json:"matchOn"`
	Name    string                 `json:"name"`
	Value   string                 `json:"value"`
}

// HTTPHeaderMatchMatchOn defines model for HTTPHeaderMatch.MatchOn.
type HTTPHeaderMatchMatchOn string

// HTTPMatch defines model for HTTPMatch.
type HTTPMatch struct {
	Headers []HTTPHeaderMatch `json:"headers,omitempty"`
	Method  *HTTPMatchMethod  `json:"method,omitempty"`
	Path    *HTTPPathMatch    `json:"path,omitempty"`
	Query   []HTTPQueryMatch  `json:"query,omitempty"`
}

// HTTPMatchMethod defines model for HTTPMatch.Method.
type HTTPMatchMethod string

// HTTPPathMatch defines model for HTTPPathMatch.
type HTTPPathMatch struct {
	MatchOn HTTPPathMatchMatchOn `json:"matchOn"`
	Value   string               `json:"value"`
}

// HTTPPathMatchMatchOn defines model for HTTPPathMatch.MatchOn.
type HTTPPathMatchMatchOn string

// HTTPQueryMatch defines model for HTTPQueryMatch.
type HTTPQueryMatch struct {
	MatchOn HTTPQueryMatchMatchOn `json:"matchOn"`
	Name    string                `json:"name"`
	Value   string                `json:"value"`
}

// HTTPQueryMatchMatchOn defines model for HTTPQueryMatch.MatchOn.
type HTTPQueryMatchMatchOn string

// HTTPRoute defines model for HTTPRoute.
type HTTPRoute struct {
	Gateways  []GatewayReference `json:"gateways"`
	Hostnames []string           `json:"hostnames,omitempty"`
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	Rules     []HTTPRouteRule    `json:"rules,omitempty"`
}

// HTTPRoutePage defines model for HTTPRoutePage.
type HTTPRoutePage struct {
	Meta   map[string]interface{} `json:"meta,omitempty"`
	Routes []HTTPRoute            `json:"routes"`
}

// HTTPRouteRule defines model for HTTPRouteRule.
type HTTPRouteRule struct {
	Filters  *HTTPFilters  `json:"filters,omitempty"`
	Matches  []HTTPMatch   `json:"matches,omitempty"`
	Services []HTTPService `json:"services,omitempty"`
}

// HTTPService defines model for HTTPService.
type HTTPService struct {
	Filters   *HTTPFilters `json:"filters,omitempty"`
	Name      string       `json:"name"`
	Namespace *string      `json:"namespace,omitempty"`
	Weight    *float32     `json:"weight,omitempty"`
}

// Listener defines model for Listener.
type Listener struct {
	Hostname string            `json:"hostname"`
	Name     *string           `json:"name,omitempty"`
	Port     float32           `json:"port"`
	Protocol ListenerProtocol  `json:"protocol"`
	Tls      *TLSConfiguration `json:"tls,omitempty"`
}

// ListenerProtocol defines model for Listener.Protocol.
type ListenerProtocol string

// TLSConfiguration defines model for TLSConfiguration.
type TLSConfiguration struct {
	Certificates []Certificate `json:"certificates,omitempty"`
	CipherSuites []string      `json:"cipherSuites,omitempty"`
	MaxVersion   *string       `json:"maxVersion,omitempty"`
	MinVersion   *string       `json:"minVersion,omitempty"`
}

// VaultCertificate defines model for VaultCertificate.
type VaultCertificate struct {
	ChainField      *string `json:"chainField,omitempty"`
	Path            *string `json:"path,omitempty"`
	PrivateKeyField *string `json:"privateKeyField,omitempty"`
}

// ListGatewaysParams defines parameters for ListGateways.
type ListGatewaysParams struct {
	// Namespaces The namespaces of gateways to list
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// ListHTTPRoutesParams defines parameters for ListHTTPRoutes.
type ListHTTPRoutesParams struct {
	// Namespaces The namespaces of routes to list
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// CreateGatewayJSONRequestBody defines body for CreateGateway for application/json ContentType.
type CreateGatewayJSONRequestBody = Gateway

// CreateHTTPRouteJSONRequestBody defines body for CreateHTTPRoute for application/json ContentType.
type CreateHTTPRouteJSONRequestBody = HTTPRoute

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateways)
	ListGateways(w http.ResponseWriter, r *http.Request, params ListGatewaysParams)

	// (POST /gateways)
	CreateGateway(w http.ResponseWriter, r *http.Request)

	// (DELETE /gateways/{name})
	DeleteGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /gateways/{name})
	GetGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /http-routes)
	ListHTTPRoutes(w http.ResponseWriter, r *http.Request, params ListHTTPRoutesParams)

	// (POST /http-routes)
	CreateHTTPRoute(w http.ResponseWriter, r *http.Request)

	// (DELETE /http-routes/{name})
	DeleteHTTPRoute(w http.ResponseWriter, r *http.Request, name string)

	// (GET /http-routes/{name})
	GetHTTPRoute(w http.ResponseWriter, r *http.Request, name string)

	// (GET /namespaces/{namespace}/gateways)
	ListGatewaysInNamespace(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/gateways/{name})
	DeleteGatewayInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/gateways/{name})
	GetGatewayInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/http-routes)
	ListHTTPRoutesInNamespace(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/http-routes/{name})
	DeleteHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/http-routes/{name})
	GetHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request, namespace string, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListGateways operation middleware
func (siw *ServerInterfaceWrapper) ListGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGatewaysParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGateways(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGateway operation middleware
func (siw *ServerInterfaceWrapper) CreateGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGateway(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGateway operation middleware
func (siw *ServerInterfaceWrapper) GetGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHTTPRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListHTTPRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListHTTPRoutesParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHTTPRoutes(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) CreateHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateHTTPRoute(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) DeleteHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHTTPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPRoute(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGatewaysInNamespace operation middleware
func (siw *ServerInterfaceWrapper) ListGatewaysInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGatewaysInNamespace(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGatewayInNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteGatewayInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGatewayInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGatewayInNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetGatewayInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGatewayInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHTTPRoutesInNamespace operation middleware
func (siw *ServerInterfaceWrapper) ListHTTPRoutesInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHTTPRoutesInNamespace(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHTTPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHTTPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHTTPRouteInNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPRouteInNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPRouteInNamespace(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways", wrapper.ListGateways)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gateways", wrapper.CreateGateway)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/gateways/{name}", wrapper.DeleteGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways/{name}", wrapper.GetGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/http-routes", wrapper.ListHTTPRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/http-routes", wrapper.CreateHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/http-routes/{name}", wrapper.DeleteHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/http-routes/{name}", wrapper.GetHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways", wrapper.ListGatewaysInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.DeleteGatewayInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.GetGatewayInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/http-routes", wrapper.ListHTTPRoutesInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/http-routes/{name}", wrapper.DeleteHTTPRouteInNamespace)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/http-routes/{name}", wrapper.GetHTTPRouteInNamespace)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6jSeuf7LgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
