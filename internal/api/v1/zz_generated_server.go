// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/andrewstucki/oapi-codegen version v1.10.2-0.20220902020913-b36ba463f350 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ListenerProtocol.
const (
	Http ListenerProtocol = "http"
	Tcp  ListenerProtocol = "tcp"
)

// Certificate defines model for Certificate.
type Certificate struct {
	Vault *VaultCertificate `json:"vault,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Gateway defines model for Gateway.
type Gateway struct {
	Listeners []Listener             `json:"listeners"`
	Meta      map[string]interface{} `json:"meta,omitempty"`
	Name      string                 `json:"name"`
	Namespace string                 `json:"namespace"`
}

// GatewayPage defines model for GatewayPage.
type GatewayPage struct {
	Gateways []Gateway              `json:"gateways"`
	Meta     map[string]interface{} `json:"meta,omitempty"`
}

// Listener defines model for Listener.
type Listener struct {
	Hostname string            `json:"hostname"`
	Name     *string           `json:"name,omitempty"`
	Port     float32           `json:"port"`
	Protocol ListenerProtocol  `json:"protocol"`
	Tls      *TLSConfiguration `json:"tls,omitempty"`
}

// ListenerProtocol defines model for Listener.Protocol.
type ListenerProtocol string

// TLSConfiguration defines model for TLSConfiguration.
type TLSConfiguration struct {
	Certificates []Certificate `json:"certificates,omitempty"`
	CipherSuites []string      `json:"cipherSuites,omitempty"`
	MaxVersion   *string       `json:"maxVersion,omitempty"`
	MinVersion   *string       `json:"minVersion,omitempty"`
}

// VaultCertificate defines model for VaultCertificate.
type VaultCertificate struct {
	ChainField      *string `json:"chainField,omitempty"`
	Path            *string `json:"path,omitempty"`
	PrivateKeyField *string `json:"privateKeyField,omitempty"`
}

// ListGatewaysParams defines parameters for ListGateways.
type ListGatewaysParams struct {
	// Namespaces The namespaces of gateways to list
	Namespaces *string `form:"namespaces,omitempty" json:"namespaces,omitempty"`
}

// CreateGatewayJSONRequestBody defines body for CreateGateway for application/json ContentType.
type CreateGatewayJSONRequestBody = Gateway

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateways)
	ListGateways(w http.ResponseWriter, r *http.Request, params ListGatewaysParams)

	// (POST /gateways)
	CreateGateway(w http.ResponseWriter, r *http.Request)

	// (DELETE /gateways/{name})
	DeleteGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /gateways/{name})
	GetGateway(w http.ResponseWriter, r *http.Request, name string)

	// (GET /namespaces/{namespace}/gateways)
	ListNamespacedGateways(w http.ResponseWriter, r *http.Request, namespace string)

	// (DELETE /namespaces/{namespace}/gateways/{name})
	DeleteNamespacedGateway(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /namespaces/{namespace}/gateways/{name})
	GetNamespacedGateway(w http.ResponseWriter, r *http.Request, namespace string, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListGateways operation middleware
func (siw *ServerInterfaceWrapper) ListGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGatewaysParams

	// ------------- Optional query parameter "namespaces" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespaces", r.URL.Query(), &params.Namespaces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespaces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGateways(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGateway operation middleware
func (siw *ServerInterfaceWrapper) CreateGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGateway(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGateway operation middleware
func (siw *ServerInterfaceWrapper) GetGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGateway(w, r, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListNamespacedGateways operation middleware
func (siw *ServerInterfaceWrapper) ListNamespacedGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNamespacedGateways(w, r, namespace)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteNamespacedGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteNamespacedGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNamespacedGateway(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNamespacedGateway operation middleware
func (siw *ServerInterfaceWrapper) GetNamespacedGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNamespacedGateway(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways", wrapper.ListGateways)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gateways", wrapper.CreateGateway)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/gateways/{name}", wrapper.DeleteGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways/{name}", wrapper.GetGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways", wrapper.ListNamespacedGateways)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.DeleteNamespacedGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/namespaces/{namespace}/gateways/{name}", wrapper.GetNamespacedGateway)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXX0/kthf9KpZ/v8cwGdg+5amUtggtIFToqtJqH4xzk3ib2Ma+gZ2ifPfKdjKZ4BSy",
	"y1Kx6r4N9vW5/849N9xTrhqtJEi0NLunllfQMP/zCAyKQnCG4P7URml3Av7ylrU1uh//N1DQjP4vHXHS",
	"HiR954x2YbouobjRQDOqrj8CR9ol9BdjlIk9cJV7v4UyDUOaUSHxzQHdAgiJUIJxCA1Yy0pv3Qh5CrLE",
	"imb7W1OLRsjSezdw0woDOc3eb58lwdeHmdiOGcId28TR1cIiSDD+D4HQ2KeKcdq/8AELeRLejEEyY9gm",
	"ZIPMgUXBSNY8nWMws5rxz66Hx999n+yk+Uh1LvraTytUhsvlBRpq3S0uyYP4tx7nYt2WPwq0UhaH0s4W",
	"c/ZCK4M7F7JtrkNvtVGouKrdJci2cZFViNoxl+ud2EYsrJ8sztXp5ZGShShbw1AoGSW/zaIPbSeQuXJE",
	"ePH8jXO7vIeTYY/7yIWuwFy24iFmXJKHDGCf3oGxfaSReSPkP1/PiU4kTXH+FRPyVwF1vmDmNHM3T5sZ",
	"ccsQ3sJmGXAceZdQC7w1AjeXruYh1kMt3sLmsA1BCEkzWgHLwdCBwfSPvSMlbVvvXak/QY4yyvxT2jlk",
	"IQsVpFci457e0DBR08wducdMi71+zH6smK0EV0avuGpGR8ENObw4If1EkytgzqA1DsnNQpam09ddQnOw",
	"3AgdyDiHcsYkK6EBie7YixMHaX3ret9n6i9R14xctNe14OQ0GJCD1Xri3mZpend3t2qC+UqZMgW59/tl",
	"enZxmh6s1qmnoMB6PiGa0NuBbXR/tV6tnb3SIJkWNKNv/FFghe9PuiuGJfjKTvP9DbA10hJW14T3gwk5",
	"Gd6tqMcPs3qS08zr2fGA6lwZ1gD6hfT+IfhVBWSr6paoYotLUBGn8TQJrLlpwWzGXo6PaNJ/GszN1wcn",
	"RVYraQMdD9brgUYgfbJM69rNmVAy/WjDlI54C7aC3zGepNPU+kTI4D8wqRi+Tr5KCOEDZcZ5K+GTBo6Q",
	"ExhttLIzDT4y4JSUMCLhbqh/3NZgNvLMSTxY/Enlm69d0rmMhllDRbiPhO5uGTQtdFGv9/+NwF5dn7tk",
	"nOr03g1KF5peQ9gmU4hw7tpvhSxrGBhAhCRYAelzGceUXDMLOVHh2h0T27rUII9I87MHH0nzqBicO6hR",
	"Alyr+6B7DfC7bCIBEQk+Twx+iMsxOA+e81cwtY+r8uJ2FYWrrUBLWilu2tC5eMyPAb+8XQUgr16sW+v/",
	"7DiP2y4MtP/dPXt3D5wpxS3IkTHzK/18uM6XLvfti4d7/QmaDP/ivSqufDNrfgFfnrMVJuJ/vkD8I958",
	"CW1ehDXJ9wX0/AXk9WPKjeWb5tvmxvdt9wLq1XV/BwAA//+xrcFi+RUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
