// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/andrewstucki/oapi-codegen version v1.10.2-0.20220902020913-b36ba463f350 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for HTTPHeaderMatchMatchOn.
const (
	HTTPHeaderMatchMatchOnExact             HTTPHeaderMatchMatchOn = "exact"
	HTTPHeaderMatchMatchOnPrefix            HTTPHeaderMatchMatchOn = "prefix"
	HTTPHeaderMatchMatchOnPresent           HTTPHeaderMatchMatchOn = "present"
	HTTPHeaderMatchMatchOnRegularExpression HTTPHeaderMatchMatchOn = "regularExpression"
	HTTPHeaderMatchMatchOnSuffix            HTTPHeaderMatchMatchOn = "suffix"
)

// Defines values for HTTPMatchMethod.
const (
	HTTPMatchMethodCONNECT HTTPMatchMethod = "CONNECT"
	HTTPMatchMethodDELETE  HTTPMatchMethod = "DELETE"
	HTTPMatchMethodGET     HTTPMatchMethod = "GET"
	HTTPMatchMethodHEAD    HTTPMatchMethod = "HEAD"
	HTTPMatchMethodOPTIONS HTTPMatchMethod = "OPTIONS"
	HTTPMatchMethodPATCH   HTTPMatchMethod = "PATCH"
	HTTPMatchMethodPOST    HTTPMatchMethod = "POST"
	HTTPMatchMethodPUT     HTTPMatchMethod = "PUT"
	HTTPMatchMethodTRACE   HTTPMatchMethod = "TRACE"
)

// Defines values for HTTPPathMatchMatchOn.
const (
	HTTPPathMatchMatchOnExact             HTTPPathMatchMatchOn = "exact"
	HTTPPathMatchMatchOnPrefix            HTTPPathMatchMatchOn = "prefix"
	HTTPPathMatchMatchOnRegularExpression HTTPPathMatchMatchOn = "regularExpression"
)

// Defines values for HTTPQueryMatchMatchOn.
const (
	HTTPQueryMatchMatchOnExact             HTTPQueryMatchMatchOn = "exact"
	HTTPQueryMatchMatchOnPresent           HTTPQueryMatchMatchOn = "present"
	HTTPQueryMatchMatchOnRegularExpression HTTPQueryMatchMatchOn = "regularExpression"
)

// Defines values for ListenerProtocol.
const (
	ListenerProtocolHttp ListenerProtocol = "http"
	ListenerProtocolTcp  ListenerProtocol = "tcp"
)

// Certificate defines model for Certificate.
type Certificate struct {
	Vault *VaultCertificate `json:"vault,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Gateway defines model for Gateway.
type Gateway struct {
	Listeners []Listener             `json:"listeners"`
	Meta      map[string]interface{} `json:"meta,omitempty"`
	Name      string                 `json:"name"`
	Namespace string                 `json:"namespace"`
}

// GatewayPage defines model for GatewayPage.
type GatewayPage struct {
	Gateways []Gateway              `json:"gateways"`
	Meta     map[string]interface{} `json:"meta,omitempty"`
}

// GatewayReference defines model for GatewayReference.
type GatewayReference struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// HTTPFilters defines model for HTTPFilters.
type HTTPFilters struct {
	Headers []HTTPHeaderFilter `json:"headers,omitempty"`
}

// HTTPHeaderFilter defines model for HTTPHeaderFilter.
type HTTPHeaderFilter struct {
	Add    *map[string]string `json:"add,omitempty"`
	Remove []string           `json:"remove,omitempty"`
	Set    *map[string]string `json:"set,omitempty"`
}

// HTTPHeaderMatch defines model for HTTPHeaderMatch.
type HTTPHeaderMatch struct {
	MatchOn HTTPHeaderMatchMatchOn `json:"matchOn"`
	Name    string                 `json:"name"`
	Value   string                 `json:"value"`
}

// HTTPHeaderMatchMatchOn defines model for HTTPHeaderMatch.MatchOn.
type HTTPHeaderMatchMatchOn string

// HTTPMatch defines model for HTTPMatch.
type HTTPMatch struct {
	Headers []HTTPHeaderMatch `json:"headers,omitempty"`
	Method  *HTTPMatchMethod  `json:"method,omitempty"`
	Path    *HTTPPathMatch    `json:"path,omitempty"`
	Query   []HTTPQueryMatch  `json:"query,omitempty"`
}

// HTTPMatchMethod defines model for HTTPMatch.Method.
type HTTPMatchMethod string

// HTTPPathMatch defines model for HTTPPathMatch.
type HTTPPathMatch struct {
	MatchOn HTTPPathMatchMatchOn `json:"matchOn"`
	Value   string               `json:"value"`
}

// HTTPPathMatchMatchOn defines model for HTTPPathMatch.MatchOn.
type HTTPPathMatchMatchOn string

// HTTPQueryMatch defines model for HTTPQueryMatch.
type HTTPQueryMatch struct {
	MatchOn HTTPQueryMatchMatchOn `json:"matchOn"`
	Name    string                `json:"name"`
	Value   string                `json:"value"`
}

// HTTPQueryMatchMatchOn defines model for HTTPQueryMatch.MatchOn.
type HTTPQueryMatchMatchOn string

// HTTPRoute defines model for HTTPRoute.
type HTTPRoute struct {
	Gateways  []GatewayReference `json:"gateways"`
	Hostnames []string           `json:"hostnames,omitempty"`
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	Rules     []HTTPRouteRule    `json:"rules,omitempty"`
}

// HTTPRoutePage defines model for HTTPRoutePage.
type HTTPRoutePage struct {
	Meta   map[string]interface{} `json:"meta,omitempty"`
	Routes []HTTPRoute            `json:"routes"`
}

// HTTPRouteRule defines model for HTTPRouteRule.
type HTTPRouteRule struct {
	Filters  *HTTPFilters  `json:"filters,omitempty"`
	Matches  []HTTPMatch   `json:"matches,omitempty"`
	Services []HTTPService `json:"services,omitempty"`
}

// HTTPService defines model for HTTPService.
type HTTPService struct {
	Filters   *HTTPFilters `json:"filters,omitempty"`
	Name      string       `json:"name"`
	Namespace *string      `json:"namespace,omitempty"`
	Weight    *float32     `json:"weight,omitempty"`
}

// Listener defines model for Listener.
type Listener struct {
	Hostname string            `json:"hostname"`
	Name     *string           `json:"name,omitempty"`
	Port     float32           `json:"port"`
	Protocol ListenerProtocol  `json:"protocol"`
	Tls      *TLSConfiguration `json:"tls,omitempty"`
}

// ListenerProtocol defines model for Listener.Protocol.
type ListenerProtocol string

// TCPRoute defines model for TCPRoute.
type TCPRoute struct {
	Gateways  []GatewayReference `json:"gateways"`
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	Services  []TCPService       `json:"services,omitempty"`
}

// TCPRoutePage defines model for TCPRoutePage.
type TCPRoutePage struct {
	Meta   map[string]interface{} `json:"meta,omitempty"`
	Routes []TCPRoute             `json:"routes"`
}

// TCPService defines model for TCPService.
type TCPService struct {
	Name      string   `json:"name"`
	Namespace string   `json:"namespace"`
	Weight    *float32 `json:"weight,omitempty"`
}

// TLSConfiguration defines model for TLSConfiguration.
type TLSConfiguration struct {
	Certificates []Certificate `json:"certificates,omitempty"`
	CipherSuites []string      `json:"cipherSuites,omitempty"`
	MaxVersion   *string       `json:"maxVersion,omitempty"`
	MinVersion   *string       `json:"minVersion,omitempty"`
}

// VaultCertificate defines model for VaultCertificate.
type VaultCertificate struct {
	ChainField      *string `json:"chainField,omitempty"`
	Path            *string `json:"path,omitempty"`
	PrivateKeyField *string `json:"privateKeyField,omitempty"`
}

// CreateGatewayJSONRequestBody defines body for CreateGateway for application/json ContentType.
type CreateGatewayJSONRequestBody = Gateway

// CreateHTTPRouteJSONRequestBody defines body for CreateHTTPRoute for application/json ContentType.
type CreateHTTPRouteJSONRequestBody = HTTPRoute

// CreateTCPRouteJSONRequestBody defines body for CreateTCPRoute for application/json ContentType.
type CreateTCPRouteJSONRequestBody = TCPRoute

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /gateways)
	ListGateways(w http.ResponseWriter, r *http.Request)

	// (POST /gateways)
	CreateGateway(w http.ResponseWriter, r *http.Request)

	// (DELETE /gateways/{namespace}/{name})
	DeleteGateway(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /gateways/{namespace}/{name})
	GetGateway(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /routes/http)
	ListHTTPRoutes(w http.ResponseWriter, r *http.Request)

	// (POST /routes/http)
	CreateHTTPRoute(w http.ResponseWriter, r *http.Request)

	// (DELETE /routes/http/{namespace}/{name})
	DeleteHTTPRoute(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /routes/http/{namespace}/{name})
	GetHTTPRoute(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /routes/tcp)
	ListTCPRoutes(w http.ResponseWriter, r *http.Request)

	// (POST /routes/tcp)
	CreateTCPRoute(w http.ResponseWriter, r *http.Request)

	// (DELETE /routes/tcp/{namespace}/{name})
	DeleteTCPRoute(w http.ResponseWriter, r *http.Request, namespace string, name string)

	// (GET /routes/tcp/{namespace}/{name})
	GetTCPRoute(w http.ResponseWriter, r *http.Request, namespace string, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListGateways operation middleware
func (siw *ServerInterfaceWrapper) ListGateways(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGateways(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGateway operation middleware
func (siw *ServerInterfaceWrapper) CreateGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGateway(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGateway operation middleware
func (siw *ServerInterfaceWrapper) DeleteGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGateway(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGateway operation middleware
func (siw *ServerInterfaceWrapper) GetGateway(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGateway(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListHTTPRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListHTTPRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListHTTPRoutes(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) CreateHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateHTTPRoute(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) DeleteHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHTTPRoute(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHTTPRoute operation middleware
func (siw *ServerInterfaceWrapper) GetHTTPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHTTPRoute(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTCPRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListTCPRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTCPRoutes(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) CreateTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTCPRoute(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) DeleteTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTCPRoute(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTCPRoute operation middleware
func (siw *ServerInterfaceWrapper) GetTCPRoute(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, chi.URLParam(r, "namespace"), &namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTCPRoute(w, r, namespace, name)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways", wrapper.ListGateways)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/gateways", wrapper.CreateGateway)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/gateways/{namespace}/{name}", wrapper.DeleteGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/gateways/{namespace}/{name}", wrapper.GetGateway)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/routes/http", wrapper.ListHTTPRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/routes/http", wrapper.CreateHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/routes/http/{namespace}/{name}", wrapper.DeleteHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/routes/http/{namespace}/{name}", wrapper.GetHTTPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/routes/tcp", wrapper.ListTCPRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/routes/tcp", wrapper.CreateTCPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/routes/tcp/{namespace}/{name}", wrapper.DeleteTCPRoute)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/routes/tcp/{namespace}/{name}", wrapper.GetTCPRoute)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+Z9Fi9+FfzeVOrS6v17/HQAA//+5nbyaOSwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
