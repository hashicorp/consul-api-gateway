// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/andrewstucki/oapi-codegen version v1.10.2-0.20220902020913-b36ba463f350 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// Start of User Generated Client

type UnexpectedResponse struct {
	code int
	body string
}

func NewUnexpectedResponse(code int, body []byte) *UnexpectedResponse {
	return &UnexpectedResponse{
		code: code,
		body: string(body),
	}
}

func (e *UnexpectedResponse) Error() string {
	return fmt.Sprintf("server response could not be parsed - code: %d, message: %s", e.code, e.body)
}

func (e *Error) Error() string {
	return fmt.Sprintf("server error - code: %d, message: %s", e.Code, e.Message)
}

func IsNotFound(e error) bool {
	var err *Error
	if errors.As(e, &err) {
		return err.Code == http.StatusNotFound
	}
	return false
}

func (c *APIClient) ListGateways(ctx context.Context, params ...ListGatewaysParams) (*GatewayPage, error) {

	// only use the first parameter passed in
	// we're abusing variadics to make params optional
	parameters := &ListGatewaysParams{}
	if len(params) > 0 {
		parameters = &params[0]
	}

	resp, err := c.client.ListGatewaysWithResponse(ctx, parameters)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) CreateGateway(ctx context.Context, body Gateway) (*Gateway, error) {
	resp, err := c.client.CreateGatewayWithResponse(ctx, CreateGatewayJSONRequestBody(body))
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON201 != nil {
		return resp.JSON201, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteGateway(ctx context.Context, name string) error {
	resp, err := c.client.DeleteGatewayWithResponse(ctx, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetGateway(ctx context.Context, name string) (*Gateway, error) {

	resp, err := c.client.GetGatewayWithResponse(ctx, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) Health(ctx context.Context) (*HealthStatus, error) {

	resp, err := c.client.HealthWithResponse(ctx)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) ListHTTPRoutes(ctx context.Context, params ...ListHTTPRoutesParams) (*HTTPRoutePage, error) {

	// only use the first parameter passed in
	// we're abusing variadics to make params optional
	parameters := &ListHTTPRoutesParams{}
	if len(params) > 0 {
		parameters = &params[0]
	}

	resp, err := c.client.ListHTTPRoutesWithResponse(ctx, parameters)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) CreateHTTPRoute(ctx context.Context, body HTTPRoute) (*HTTPRoute, error) {
	resp, err := c.client.CreateHTTPRouteWithResponse(ctx, CreateHTTPRouteJSONRequestBody(body))
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON201 != nil {
		return resp.JSON201, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteHTTPRoute(ctx context.Context, name string) error {
	resp, err := c.client.DeleteHTTPRouteWithResponse(ctx, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetHTTPRoute(ctx context.Context, name string) (*HTTPRoute, error) {

	resp, err := c.client.GetHTTPRouteWithResponse(ctx, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) ListGatewaysInNamespace(ctx context.Context, namespace string) (*GatewayPage, error) {

	resp, err := c.client.ListGatewaysInNamespaceWithResponse(ctx, namespace)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteGatewayInNamespace(ctx context.Context, namespace string, name string) error {
	resp, err := c.client.DeleteGatewayInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetGatewayInNamespace(ctx context.Context, namespace string, name string) (*Gateway, error) {

	resp, err := c.client.GetGatewayInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) ListHTTPRoutesInNamespace(ctx context.Context, namespace string) (*HTTPRoutePage, error) {

	resp, err := c.client.ListHTTPRoutesInNamespaceWithResponse(ctx, namespace)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteHTTPRouteInNamespace(ctx context.Context, namespace string, name string) error {
	resp, err := c.client.DeleteHTTPRouteInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetHTTPRouteInNamespace(ctx context.Context, namespace string, name string) (*HTTPRoute, error) {

	resp, err := c.client.GetHTTPRouteInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) ListTCPRoutesInNamespace(ctx context.Context, namespace string) (*TCPRoutePage, error) {

	resp, err := c.client.ListTCPRoutesInNamespaceWithResponse(ctx, namespace)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteTCPRouteInNamespace(ctx context.Context, namespace string, name string) error {
	resp, err := c.client.DeleteTCPRouteInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetTCPRouteInNamespace(ctx context.Context, namespace string, name string) (*TCPRoute, error) {

	resp, err := c.client.GetTCPRouteInNamespaceWithResponse(ctx, namespace, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) ListTCPRoutes(ctx context.Context, params ...ListTCPRoutesParams) (*TCPRoutePage, error) {

	// only use the first parameter passed in
	// we're abusing variadics to make params optional
	parameters := &ListTCPRoutesParams{}
	if len(params) > 0 {
		parameters = &params[0]
	}

	resp, err := c.client.ListTCPRoutesWithResponse(ctx, parameters)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) CreateTCPRoute(ctx context.Context, body TCPRoute) (*TCPRoute, error) {
	resp, err := c.client.CreateTCPRouteWithResponse(ctx, CreateTCPRouteJSONRequestBody(body))
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON201 != nil {
		return resp.JSON201, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

func (c *APIClient) DeleteTCPRoute(ctx context.Context, name string) error {
	resp, err := c.client.DeleteTCPRouteWithResponse(ctx, name)
	if err != nil {
		return err
	}
	if resp.JSONDefault != nil && resp.JSONDefault.Code != 0 {
		return resp.JSONDefault
	}
	if resp.StatusCode() != http.StatusAccepted {
		return NewUnexpectedResponse(resp.StatusCode(), resp.Body)
	}
	return nil
}

func (c *APIClient) GetTCPRoute(ctx context.Context, name string) (*TCPRoute, error) {

	resp, err := c.client.GetTCPRouteWithResponse(ctx, name)
	if err != nil {
		return nil, err
	}
	if resp.JSONDefault != nil {
		return nil, resp.JSONDefault
	}
	if resp.JSON200 != nil {
		return resp.JSON200, nil
	}
	return nil, NewUnexpectedResponse(resp.StatusCode(), resp.Body)
}

// End of User Generated Client

// Start generated server helpers

func sendError(w http.ResponseWriter, code int, message string) {
	send(w, code, Error{
		Code:    int32(code),
		Message: message,
	})
}

func send(w http.ResponseWriter, code int, object interface{}) {
	w.WriteHeader(code)
	json.NewEncoder(w).Encode(object)
}

func sendEmpty(w http.ResponseWriter, code int) {
	w.WriteHeader(code)
	w.Write([]byte("{}\n"))
}

// End generated server helpers
