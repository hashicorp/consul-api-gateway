// Code generated by MockGen. DO NOT EDIT.
// Source: ./peerings.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// MockPeerings is a mock of Peerings interface.
type MockPeerings struct {
	ctrl     *gomock.Controller
	recorder *MockPeeringsMockRecorder
}

// MockPeeringsMockRecorder is the mock recorder for MockPeerings.
type MockPeeringsMockRecorder struct {
	mock *MockPeerings
}

// NewMockPeerings creates a new mock instance.
func NewMockPeerings(ctrl *gomock.Controller) *MockPeerings {
	mock := &MockPeerings{ctrl: ctrl}
	mock.recorder = &MockPeeringsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerings) EXPECT() *MockPeeringsMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockPeerings) Read(arg0 context.Context, arg1 string, arg2 *api.QueryOptions) (*api.Peering, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Peering)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockPeeringsMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPeerings)(nil).Read), arg0, arg1, arg2)
}
