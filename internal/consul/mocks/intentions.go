// Code generated by MockGen. DO NOT EDIT.
// Source: ./intentions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// MockconsulDiscoveryChains is a mock of consulDiscoveryChains interface.
type MockconsulDiscoveryChains struct {
	ctrl     *gomock.Controller
	recorder *MockconsulDiscoveryChainsMockRecorder
}

// MockconsulDiscoveryChainsMockRecorder is the mock recorder for MockconsulDiscoveryChains.
type MockconsulDiscoveryChainsMockRecorder struct {
	mock *MockconsulDiscoveryChains
}

// NewMockconsulDiscoveryChains creates a new mock instance.
func NewMockconsulDiscoveryChains(ctrl *gomock.Controller) *MockconsulDiscoveryChains {
	mock := &MockconsulDiscoveryChains{ctrl: ctrl}
	mock.recorder = &MockconsulDiscoveryChainsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconsulDiscoveryChains) EXPECT() *MockconsulDiscoveryChainsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockconsulDiscoveryChains) Get(name string, opts *api.DiscoveryChainOptions, qopts *api.QueryOptions) (*api.DiscoveryChainResponse, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, opts, qopts)
	ret0, _ := ret[0].(*api.DiscoveryChainResponse)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockconsulDiscoveryChainsMockRecorder) Get(name, opts, qopts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockconsulDiscoveryChains)(nil).Get), name, opts, qopts)
}

// MockconsulConfigEntries is a mock of consulConfigEntries interface.
type MockconsulConfigEntries struct {
	ctrl     *gomock.Controller
	recorder *MockconsulConfigEntriesMockRecorder
}

// MockconsulConfigEntriesMockRecorder is the mock recorder for MockconsulConfigEntries.
type MockconsulConfigEntriesMockRecorder struct {
	mock *MockconsulConfigEntries
}

// NewMockconsulConfigEntries creates a new mock instance.
func NewMockconsulConfigEntries(ctrl *gomock.Controller) *MockconsulConfigEntries {
	mock := &MockconsulConfigEntries{ctrl: ctrl}
	mock.recorder = &MockconsulConfigEntriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconsulConfigEntries) EXPECT() *MockconsulConfigEntriesMockRecorder {
	return m.recorder
}

// CAS mocks base method.
func (m *MockconsulConfigEntries) CAS(entry api.ConfigEntry, index uint64, w *api.WriteOptions) (bool, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CAS", entry, index, w)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CAS indicates an expected call of CAS.
func (mr *MockconsulConfigEntriesMockRecorder) CAS(entry, index, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAS", reflect.TypeOf((*MockconsulConfigEntries)(nil).CAS), entry, index, w)
}

// Delete mocks base method.
func (m *MockconsulConfigEntries) Delete(kind, name string, w *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", kind, name, w)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockconsulConfigEntriesMockRecorder) Delete(kind, name, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockconsulConfigEntries)(nil).Delete), kind, name, w)
}

// Get mocks base method.
func (m *MockconsulConfigEntries) Get(kind, name string, q *api.QueryOptions) (api.ConfigEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", kind, name, q)
	ret0, _ := ret[0].(api.ConfigEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockconsulConfigEntriesMockRecorder) Get(kind, name, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockconsulConfigEntries)(nil).Get), kind, name, q)
}
